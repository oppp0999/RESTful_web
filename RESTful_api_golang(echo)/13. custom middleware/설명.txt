로깅을 위한 커스텀 미들웨어가 필요하고
핸들러를 수정하기 전 수행한 후에 작업은 요청에 따라 다르다.

예를 들어 모든 요청 마다 ~~를 수행하고 싶다.
API 별로 레이턴시를 체크, body나 query string을 로그로 남기고 어떤 유저의 요청인지 매 요청마다 정보를 주입하고싶을 때

미들웨어를 거치면 편하게 작업할 수 있다.


대표적으로는 인증이나 캐싱, 로깅, 응답 타임아웃 등에 사용
대표적으로는 인증이나 캐싱, 로깅, 응답 타임아웃 등에 사용
대표적으로는 인증이나 캐싱, 로깅, 응답 타임아웃 등에 사용대표적으로는 인증이나 캐싱, 로깅, 응답 타임아웃 등에 사용대표적으로는 인증이나 캐싱, 로깅, 응답 타임아웃 등에 사용
대표적으로는 인증이나 캐싱, 로깅, 응답 타임아웃 등에 사용대표적으로는 인증이나 캐싱, 로깅, 응답 타임아웃 등에 사용

대표적으로는 인증이나 캐싱, 로깅, 응답 타임아웃 등에 사용
대표적으로는 인증이나 캐싱, 로깅, 응답 타임아웃 등에 사용
대표적으로는 인증이나 캐싱, 로깅, 응답 타임아웃 등에 사용
대표적으로는 인증이나 캐싱, 로깅, 응답 타임아웃 등에 사용
대표적으로는 인증이나 캐싱, 로깅, 응답 타임아웃 등에 사용
대표적으로는 인증이나 캐싱, 로깅, 응답 타임아웃 등에 사용


go/pkg/mod/github.com/labstack/echo/에 있는 핸들러func을 사용하여 log를 받을 수 있다.

func serverHeader(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
	fmt.Println("inside serverheader middleware")
	return next(c)	 -> next를 이용해서 다음으로 할 것을 표시할 수 있다.
}
}

이름과 print를 수정하여 log로 이용가능

echo -> use 메서드라는 미들웨어 기능도 있다.
